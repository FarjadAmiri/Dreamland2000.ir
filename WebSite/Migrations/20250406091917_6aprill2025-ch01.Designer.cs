// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSite.DataLayer.Context;

#nullable disable

namespace WebSite.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20250406091917_6aprill2025-ch01")]
    partial class _6aprill2025ch01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebSite.DataLayer.Entities.About.About", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Video")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("About");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Address.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProvinceRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.HasIndex("ProvinceRefId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Address.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Responsibility")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Visit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.AgentComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentRefId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentRefId");

                    b.HasIndex("UserRefId");

                    b.ToTable("AgentComment");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.AgentMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentRefId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderTell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentRefId");

                    b.HasIndex("UserRefId");

                    b.ToTable("AgentMessage");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("BlogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupRefId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Visit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupRefId");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogRefId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogRefId");

                    b.HasIndex("UserRefId");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VisibleStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("BlogGroup");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogRefId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogRefId");

                    b.ToTable("BlogPhoto");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Contact.Contact", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Telegram")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WhatsApp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Contact.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenderTell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ContactMessage");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Fact.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Fact");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Faq.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Language.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int?>("CityRefId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GroupRefId")
                        .HasColumnType("int");

                    b.Property<string>("Iframe")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParkingCount")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("Price")
                        .HasMaxLength(100)
                        .HasColumnType("real");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentPeriodRefId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomCount")
                        .HasColumnType("int");

                    b.Property<int?>("StatusRefId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TypeRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Visit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentRefId");

                    b.HasIndex("CityRefId");

                    b.HasIndex("GroupRefId");

                    b.HasIndex("LanguageRefId");

                    b.HasIndex("RentPeriodRefId");

                    b.HasIndex("StatusRefId");

                    b.HasIndex("TypeRefId");

                    b.ToTable("RealEstate");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("RealEstateAge");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RealEstateRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateRefId");

                    b.HasIndex("UserRefId");

                    b.ToTable("RealEstateComment");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("RealEstateGroup");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateJoinOption", b =>
                {
                    b.Property<int>("JoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JoinId"));

                    b.Property<int?>("OptionRefId")
                        .HasColumnType("int");

                    b.Property<int?>("RealEstateRefId")
                        .HasColumnType("int");

                    b.HasKey("JoinId");

                    b.HasIndex("OptionRefId");

                    b.HasIndex("RealEstateRefId");

                    b.ToTable("RealEstateJoinOption");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("RealEstateOption");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstatePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RealEstateRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateRefId");

                    b.ToTable("RealEstatePhoto");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateRentPeriod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("RealEstateRentPeriod");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("RealEstateStatus");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("RealEstateType");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("GroupRefId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Visit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupRefId");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.ServiceComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceRefId")
                        .HasColumnType("int");

                    b.Property<string>("Tell")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRefId");

                    b.HasIndex("UserRefId");

                    b.ToTable("ServiceComment");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.ServiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("ServiceGroup");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Testimonial.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Service")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageRefId");

                    b.ToTable("Testimonial");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ParentRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentRefId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.PermissionJoinRole", b =>
                {
                    b.Property<int>("JoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JoinId"));

                    b.Property<int?>("PermissionRefId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleRefId")
                        .HasColumnType("int");

                    b.HasKey("JoinId");

                    b.HasIndex("PermissionRefId");

                    b.HasIndex("RoleRefId");

                    b.ToTable("PermissionJoinRole");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.UserJoinRole", b =>
                {
                    b.Property<int>("JoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JoinId"));

                    b.Property<int>("RoleRefId")
                        .HasColumnType("int");

                    b.Property<int>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("JoinId");

                    b.HasIndex("RoleRefId");

                    b.HasIndex("UserRefId");

                    b.ToTable("UserJoinRole");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisposablePassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailActiveCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMobileActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLoggedIn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileActiveCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.About.About", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Address.City", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.HasOne("WebSite.DataLayer.Entities.Address.Province", "Province")
                        .WithMany("CityList")
                        .HasForeignKey("ProvinceRefId");

                    b.Navigation("Language");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Address.Province", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.Agent", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.AgentComment", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Agent.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentRefId");

                    b.HasOne("WebSite.DataLayer.Entities.User.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserRefId");

                    b.Navigation("Agent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.AgentMessage", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Agent.Agent", "Agent")
                        .WithMany("MessageList")
                        .HasForeignKey("AgentRefId");

                    b.HasOne("WebSite.DataLayer.Entities.User.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserRefId");

                    b.Navigation("Agent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.Blog", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Blog.BlogGroup", "Group")
                        .WithMany("BlogList")
                        .HasForeignKey("GroupRefId");

                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Group");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogComment", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Blog.Blog", "Blog")
                        .WithMany("CommentList")
                        .HasForeignKey("BlogRefId");

                    b.HasOne("WebSite.DataLayer.Entities.User.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserRefId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogGroup", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogPhoto", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Blog.Blog", "Blog")
                        .WithMany("PhotoList")
                        .HasForeignKey("BlogRefId");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Contact.Contact", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Fact.Fact", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Faq.Faq", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstate", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Agent.Agent", "Agent")
                        .WithMany("RealEstateList")
                        .HasForeignKey("AgentRefId");

                    b.HasOne("WebSite.DataLayer.Entities.Address.City", "City")
                        .WithMany()
                        .HasForeignKey("CityRefId");

                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstateGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupRefId");

                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstateRentPeriod", "RentPeriod")
                        .WithMany()
                        .HasForeignKey("RentPeriodRefId");

                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstateStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusRefId");

                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstateType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeRefId");

                    b.Navigation("Agent");

                    b.Navigation("City");

                    b.Navigation("Group");

                    b.Navigation("Language");

                    b.Navigation("RentPeriod");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateAge", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateComment", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstate", "RealEstate")
                        .WithMany("CommentList")
                        .HasForeignKey("RealEstateRefId");

                    b.HasOne("WebSite.DataLayer.Entities.User.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserRefId");

                    b.Navigation("RealEstate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateGroup", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateJoinOption", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstateOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionRefId");

                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstate", "RealEstate")
                        .WithMany("OptionList")
                        .HasForeignKey("RealEstateRefId");

                    b.Navigation("Option");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateOption", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstatePhoto", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.RealEstate.RealEstate", "RealEstate")
                        .WithMany("PhotoList")
                        .HasForeignKey("RealEstateRefId");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateRentPeriod", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateStatus", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstateType", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.Service", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Service.ServiceGroup", "Group")
                        .WithMany("ServiceList")
                        .HasForeignKey("GroupRefId");

                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Group");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.ServiceComment", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Service.Service", "Service")
                        .WithMany("CommentList")
                        .HasForeignKey("ServiceRefId");

                    b.HasOne("WebSite.DataLayer.Entities.User.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserRefId");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.ServiceGroup", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Testimonial.Testimonial", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageRefId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Permission", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.User.Permission", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentRefId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.PermissionJoinRole", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.User.Permission", "Permission")
                        .WithMany("RoleList")
                        .HasForeignKey("PermissionRefId");

                    b.HasOne("WebSite.DataLayer.Entities.User.Role", "Role")
                        .WithMany("PermissionList")
                        .HasForeignKey("RoleRefId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.UserJoinRole", b =>
                {
                    b.HasOne("WebSite.DataLayer.Entities.User.Role", "Role")
                        .WithMany("UserList")
                        .HasForeignKey("RoleRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSite.DataLayer.Entities.User.Users", "User")
                        .WithMany("RoleList")
                        .HasForeignKey("UserRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Address.Province", b =>
                {
                    b.Navigation("CityList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Agent.Agent", b =>
                {
                    b.Navigation("MessageList");

                    b.Navigation("RealEstateList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.Blog", b =>
                {
                    b.Navigation("CommentList");

                    b.Navigation("PhotoList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Blog.BlogGroup", b =>
                {
                    b.Navigation("BlogList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.RealEstate.RealEstate", b =>
                {
                    b.Navigation("CommentList");

                    b.Navigation("OptionList");

                    b.Navigation("PhotoList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.Service", b =>
                {
                    b.Navigation("CommentList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.Service.ServiceGroup", b =>
                {
                    b.Navigation("ServiceList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Permission", b =>
                {
                    b.Navigation("RoleList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Role", b =>
                {
                    b.Navigation("PermissionList");

                    b.Navigation("UserList");
                });

            modelBuilder.Entity("WebSite.DataLayer.Entities.User.Users", b =>
                {
                    b.Navigation("RoleList");
                });
#pragma warning restore 612, 618
        }
    }
}
